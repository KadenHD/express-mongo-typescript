{
    "CRUD Mongo": {
        "prefix": "crudmongocontroller",
        "body": [
            "import { Request, Response, NextFunction } from 'express';",
            "import mongoose from 'mongoose';",
            "import ${1:ModelName} from '../models/${1:ModelName}';",
            "",
            "const create${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    const { ${3:StartName} } = req.body;",
            "",
            "    const ${2:VariableName} = new ${1:ModelName}({",
            "        _id: new mongoose.Types.ObjectId(),",
            "        ${3:StartName}",
            "    });",
            "",
            "    return ${2:VariableName}",
            "        .save()",
            "        .then((${2:VariableName}) => res.status(201).json({ ${2:VariableName} }))",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "const find${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
            "",
            "    return ${1:ModelName}.findById(${2:VariableName}Id)",
            "        .then((${2:VariableName}) => (${2:VariableName} ? res.status(200).json({ ${2:VariableName} }) : res.status(404).json({ message: 'Not found' })))",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "const findAll${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    return ${1:ModelName}.find()",
            "        .then((${2:VariableName}s) => res.status(200).json({ ${2:VariableName}s }))",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "const update${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
            "",
            "    return ${1:ModelName}.findById(${2:VariableName}Id)",
            "        .then((${2:VariableName}) => {",
            "            if (${2:VariableName}) {",
            "                ${2:VariableName}.set(req.body);",
            "",
            "                return ${2:VariableName}",
            "                    .save()",
            "                    .then((${2:VariableName}) => res.status(201).json({ ${2:VariableName} }))",
            "                    .catch((error) => res.status(500).json({ error }));",
            "            } else {",
            "                res.status(404).json({ message: 'Not found' });",
            "            }",
            "        })",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "const delete${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
            "",
            "    return ${1:ModelName}.findById(${2:VariableName}Id)",
            "        .then((${2:VariableName}) => {",
            "            if (${2:VariableName}) {",
            "                return ${2:VariableName}",
            "                    .remove()",
            "                    .then(() => res.status(201).json({ message: `${1:ModelName} with _id [${${2:VariableName}Id}] deleted` }))",
            "                    .catch((error) => res.status(500).json({ error }));",
            "            } else {",
            "                res.status(404).json({ message: 'Not found' });",
            "            }",
            "        })",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "export default { create${1:ModelName}, find${1:ModelName}, findAll${1:ModelName}, update${1:ModelName}, delete${1:ModelName} };"
        ]
    },
    "CRUD Mongo Routes": {
        "prefix": "crudmongoroutes",
        "body": [
            "import express from 'express';",
            "import controller from '../controllers/${1:ModelName}';",
            "import { Schemas, ValidateSchema } from '../middleware/ValidateSchema';",
            "",
            "const router = express.Router();",
            "",
            "router.post('/create', ValidateSchema(Schemas.${2:VariableName}.create), controller.create${1:ModelName});",
            "router.get('/get/:${2:VariableName}Id', controller.find${1:ModelName});",
            "router.get('/get', controller.findAll${1:ModelName});",
            "router.patch('/update/:${2:VariableName}Id', ValidateSchema(Schemas.${2:VariableName}.create), controller.update${1:ModelName});",
            "router.delete('/delete/:${2:VariableName}Id', controller.delete${1:ModelName});",
            "",
            "export = router;"
        ]
    },
    "CRUD Mongo Models": {
        "prefix": "crudmongomodels",
        "body": [
            "import mongoose, { Document, Schema } from 'mongoose';",
            "",
            "export interface I${1:ModelName} {",
            "",
            "}",
            "",
            "export interface I${1:ModelName}Model extends I${1:ModelName}, Document {}",
            "",
            "const ${1:ModelName}Schema: Schema = new Schema(",
            "    {",
            "",
            "    },",
            "    {",
            "        timestamps: true",
            "    }",
            ").pre('save', function (next) {",
            "    this.increment();",
            "    next();",
            "});",
            "",
            "export default mongoose.model<I${1:ModelName}Model>('${1:ModelName}', ${1:ModelName}Schema);"
        ]
    }
}
